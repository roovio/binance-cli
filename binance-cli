#!/usr/bin/env python

import sys
import json
import time
import fileinput
import pandas
from pandas import DataFrame
from termcolor import colored, cprint

from binance_api import Binance
from binance_api import BinanceQueryError
from msg import debug, info, warn, err
import config

PROMPT="> "


api = Binance(config.api_key, config.secret)

LOW_BALANCE_THRESHOLD = 0.01

pandas.set_option("precision", 8)

def title(name: str):
    cprint(f"\n{name}\n", 'red', attrs=['bold'])

def binance_convert_datetime_local(series):
    return pandas.DatetimeIndex(pandas.to_datetime(series, unit='ms')).tz_localize('UTC' ).tz_convert(time.tzname[0])

def cmd_ping():
    t = time.time()
    api.ping()
    print(f"{(time.time()-t)*1000:.2f}ms")

def cmd_account():
    response = api.dailyAccountSnapshot("SPOT")
    pretty_json(response)

def cmd_market_price(symbol: str):
    response = api.symbolPriceTicker(symbol)
    print(float(response['price']))

def cmd_equity():
    title("Equity")
    response = api.allCoinsInformation()
    df = DataFrame.from_dict(response)
    df = df.filter(items=["coin", "name", "free", "locked"])#, "storage", "trading"])
    df['free'] = pandas.to_numeric(df['free'])
    df['locked'] = pandas.to_numeric(df['locked'])
    df = df.loc[lambda df:  (df['free'] > LOW_BALANCE_THRESHOLD) | (df['locked'] > LOW_BALANCE_THRESHOLD), :]
    
    prices_df = DataFrame.from_dict(api.allSymbolsPriceTicker()).set_index(keys='symbol')
    prices_df['price'] = pandas.to_numeric(prices_df['price'])

    prices_usd=[]
    for idx, data in df.iterrows():
        coin = data['coin']
        price_usd = 0
        if coin != "USDT":
            if coin + "USDT" in prices_df.index:
                price_usd = prices_df.at[coin + "USDT", 'price']
            elif coin + "BTC" in prices_df.index and "BTCUSDT" in prices_df.index:
                price_usd = prices_df.at[coin + "BTC", 'price'] * prices_df.at["BTCUSDT", 'price']
            elif coin + "ETH" in prices_df.index and "ETHUSDT" in prices_df.index:
                price_usd = prices_df.at[coin + "ETH", 'price'] * prices_df.at["ETHUSDT", 'price']
            else:
                price_usd = 0
        else:
            price_usd = 1
        prices_usd.append(price_usd)
    df['rate $'] = prices_usd
    df['equiv $'] = (df['free'] + df['locked']) * df['rate $']
    df = df.sort_values(by="equiv $", ascending=False)

    print(df.to_string(index=False))


order_table_formatters =\
{
    'time': lambda x: x.strftime("%m-%d %H:%M:%S"),
}


def cmd_open_orders():
    title("Open Orders")
    response = api.currentOpenOrders()
    df = DataFrame.from_dict(response)
    df['time'] = binance_convert_datetime_local(df['time'])
    df['price'] = pandas.to_numeric(df['price'])
    df['stopPrice'] = pandas.to_numeric(df['stopPrice'])
    df['executedQty'] = pandas.to_numeric(df['executedQty'])
    df['origQty'] = pandas.to_numeric(df['origQty'])
    df['origQuoteOrderQty'] = pandas.to_numeric(df['origQuoteOrderQty'])
    df['cummulativeQuoteQty'] = pandas.to_numeric(df['cummulativeQuoteQty'])
    df['total'] = df['price'] * df['origQty']
    #df['stopPrice'] = df['stopPrice'].transform(lambda s: s if s > 0.00000001 else '-')   #note: breaks decimal point alignment because column type is no longer numeric
    df = df.sort_values(by="time", ascending=False)
    df = df.filter(items=[ "orderId", "time", "symbol", "type", "side", "price", "origQty", "executedQty", "total", "stopPrice", "status" ])
    print(df.to_string(formatters=order_table_formatters, index=False))
 

def cmd_status():
    cmd_equity()
    print("")
    cmd_open_orders()
    

def cmd_order_history(symbol: str):
    title("Order History")
    response = api.allOrders(symbol)
    df = DataFrame.from_dict(response)
    df['time'] = binance_convert_datetime_local(df['time'])
    df['price'] = pandas.to_numeric(df['price'])
    df['executedQty'] = pandas.to_numeric(df['executedQty'])
    df['origQty'] = pandas.to_numeric(df['origQty'])
    df['origQuoteOrderQty'] = pandas.to_numeric(df['origQuoteOrderQty'])
    df['cummulativeQuoteQty'] = pandas.to_numeric(df['cummulativeQuoteQty'])
    df['average'] = df['cummulativeQuoteQty'] / df['executedQty']
    
    df = df.loc[lambda df: df['executedQty'] > 0, :]
    
    #df['side'] = df['side'].transform(lambda s: colored(s, ['red', 'green'][s != "SELL"])) # note breaks column titles out of alignment

    #df['price'] = df['price'].transform(lambda s: s if s > 0.00000001 else 'Market')  #note: breaks decimal point alignment because column type is no longer numeric
    
    df = df.sort_values(by="time", ascending=False)
    df = df.filter(items=[ "orderId", "time", "symbol", "type", "side", "average", "price", "executedQty", "origQty", "origQuoteOrderQty", "cummulativeQuoteQty", "status"])
    print(df.to_string(formatters=order_table_formatters, index=False))


def cmd_equiv_cummulative_signed_order(symbol: str, since: pandas.Timestamp):
    title(f"Equivalent cummulative signed order since {since}")
    response = api.allOrders(symbol)
    df = DataFrame.from_dict(response)
    df = df.filter(items=[ "time", "side", "executedQty", "cummulativeQuoteQty"])

    df['time'] = binance_convert_datetime_local(df['time'])
    df['executedQty'] = pandas.to_numeric(df['executedQty'])
    df['cummulativeQuoteQty'] = pandas.to_numeric(df['cummulativeQuoteQty'])
    
    df = df.loc[lambda df: df['executedQty'] > 0, :]
    df = df.sort_values(by="time", ascending=False)
    df = df.loc[lambda df: df['time'] >= since, :]
    
    total_quote_qty = df.apply(lambda s: s['cummulativeQuoteQty'] * [1,-1][s['side'] == "SELL"], axis=1).sum()
    total_tokens_qty = df.apply(lambda s: s['executedQty'] * [1,-1][s['side'] == "SELL"], axis=1).sum()

    print(df.to_string(formatters=order_table_formatters, index=False))
    print(f"equiv quote qty: {total_quote_qty:.8f}\nequiv tokens qty: {total_tokens_qty:.8f}\nequiv price: {total_quote_qty/total_tokens_qty:.8f}")
    

def parse_qty(symbol: str, qty_str: str):
    convert = False
    if qty_str[-1] == "$":
        qty = float(qty_str[:-1])
        qty_tokens = qty / float(api.symbolPriceTicker(symbol)['price'])
        qty_tokens = round(qty_tokens, ndigits=3)
        info(f"derived quantity as {qty_tokens} {symbol} tokens, using market price ticker")
        return qty_tokens
    else:
        qty_tokens = float(qty_str)
        return qty_tokens


def cmd_order_buy_market(symbol: str, qty: float) -> dict:
    return api.createMarketOrder(symbol, "BUY", qty)

def cmd_order_buy_limit(symbol: str, limit_str: str, qty: float) -> dict:
    [ot,price] = limit_str.split("=")
    limit_price = float(price)
    return api.createLimitOrder(symbol, "BUY", qty, limit_price)

def cmd_order_buy(tokens: list[str]):
    symbol = tokens[0]
    qty = parse_qty(symbol, tokens[2])
    order_type_str = tokens[1]
    r = {}
    if order_type_str == "market":
        r = cmd_order_buy_market(symbol, qty)
    elif "limit" in order_type_str:
        r = cmd_order_buy_limit(symbol, order_type_str, qty)
    else:
        err("invalid order type", order_type_str)
        return
    print(f"{r['status']} order {r['orderId']}")


def cmd_order_sell_market(symbol: str, qty: float):
    return api.createMarketOrder(symbol, "SELL", qty)

def cmd_order_sell_limit(symbol: str, limit_str: str, qty: float):
    [ot,price] = limit_str.split("=")
    limit_price = float(price)
    return api.createLimitOrder(symbol, "SELL", qty, limit_price)

def cmd_order_sell(tokens: list[str]):
    symbol = tokens[0]
    qty = parse_qty(symbol, tokens[2])
    order_type_str = tokens[1]
    r = {}
    if order_type_str == "market":
        r = cmd_order_sell_market(symbol, qty)
    elif "limit" in order_type_str:
        r = cmd_order_sell_limit(symbol, order_type_str, qty)
    else:
        err("invalid order type", order_type_str)
        return
    print(f"{r['status']} order {r['orderId']}")


def cmd_order_cancel_id(symbol: str, order_id: int):
    info(f"canceling order {order_id} on {symbol}")
    response = api.cancelOrder(symbol, order_id)
    print(response['status'])


def cmd_order_cancel_all_symbol(symbol: str):
    info(f"canceling all orders on {symbol}!")
    response = api.cancelAllOpenOrders(symbol)
    for order_status in response:
        print(f"order {order_status['orderId']} -> {order_status['status']}")


def cmd_order_cancel_all():
    #info("canceling EVERY order!")
    warn("not implemented")


def execute_command(tokens: list[str]):
    if len(tokens) >= 1:
        cmd = tokens[0]
        if cmd == "ping":
            cmd_ping()
        elif cmd == "price":
            cmd_market_price(tokens[1])
        elif cmd == "status":
            cmd_status()
        elif cmd == "equity":
            cmd_equity()
        elif cmd == "oo":
            cmd_open_orders()
        elif cmd == "oh":
            cmd_order_history(tokens[1])
        elif cmd == "equiv_order":
            cmd_equiv_cummulative_signed_order(tokens[1], pandas.Timestamp(tokens[2], tz=time.tzname[0]))
        elif cmd == "buy":
            cmd_order_buy(tokens[1:])
        elif cmd == "sell":
            cmd_order_sell(tokens[1:])
        elif cmd == "cancel":
            try:
                symbol  = tokens[1]
                if symbol == "ALL":
                    cmd_order_cancel_all()
                else:
                    order_id = tokens[2]
                    if order_id == "ALL":
                        cmd_order_cancel_all_symbol(symbol)
                    else:
                        cmd_order_cancel_id(symbol, int(order_id))
            except Exception as e:
                err(f"{e}")
        else:
            err(f"unknown command: {cmd}")


def execute_command_exc_wrapper(tokens: list[str]):
    try:
        execute_command(tokens)
    except BinanceQueryError as e:
        err(f"{e}")


def next_command(stdin):
    print("\n" + PROMPT, end="")
    sys.stdout.flush()
    line = stdin.readline().rstrip()
    tokens = line.split()
    execute_command_exc_wrapper(tokens)


def run_command_loop():
    stdin = fileinput.input()
    while True:
        #try:
        next_command(stdin)
        #except Exception as e:
        #    err(f"{e}")


def run_oneshot(tokens: list[str]):
    execute_command_exc_wrapper(tokens)


if __name__ == '__main__':
    if len(sys.argv) > 2 and sys.argv[1] == "--":
        run_oneshot(sys.argv[2:])
    else:
        print("Binance CLI started")
        run_command_loop()
